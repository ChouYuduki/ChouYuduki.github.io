[{"content":"最新バーションのGaussian Splattingのエラー：\n1 TypeError: GaussianRasterizationSettings.__new__() missing 1 required positional argument: \u0026#39;antialiasing\u0026#39; このエラーに対して： gaussian_renderer/int.pyのコードにこれを加えて： antialiasing=True\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 raster_settings = GaussianRasterizationSettings( image_height=int(data[\u0026#39;novel_view\u0026#39;][\u0026#39;height\u0026#39;][idx]), image_width=int(data[\u0026#39;novel_view\u0026#39;][\u0026#39;width\u0026#39;][idx]), tanfovx=tanfovx, tanfovy=tanfovy, bg=bg_color, scale_modifier=1.0, viewmatrix=data[\u0026#39;novel_view\u0026#39;][\u0026#39;world_view_transform\u0026#39;][idx], projmatrix=data[\u0026#39;novel_view\u0026#39;][\u0026#39;full_proj_transform\u0026#39;][idx], sh_degree=3, campos=data[\u0026#39;novel_view\u0026#39;][\u0026#39;camera_center\u0026#39;][idx], prefiltered=False, debug=False， **antialiasing=True** 出力データも改正すべき、もう一つ_を加えて：\n1 rendered_image, radii, _ = rasterizer( ","date":"2025-07-07T00:00:00Z","permalink":"http://localhost:1313/p/newest-3dgs-init-error/","title":"Newest 3DGS Init Error"},{"content":"留学生は風俗でバイトということは絶対禁止ですが、セックスに関する仕事とは限らない。\n日本法律對留學生可從事的工作類型有所限制，風俗營業類型的店舖一律禁止留學生打工。所謂「風俗営業」是指《風俗営業等の規制及び業務の適正化等に関する法律》（簡稱風営法）所定義的一類營業類型，包括以下情形：\n接待陪侍的飲食店：例如有女服務生陪客人飲酒(setting beside)的俱樂部、キャバクラ（陪酒夜總會）、スナック等。這類屬於風俗営業第1號許可對象（接待飲食店）。留學生無論從事陪侍還是單純端茶倒水、洗碗等後勤工作，都禁止在此類場所工作。 照度極低的飲食店：如果酒吧營業時刻意將客席區域燈光調暗到照度10 Lux以下，法律定義其為「低照度飲食店」，這屬於風俗営業第2號許可範疇。換言之，普通餐飲店若燈光昏暗到一定程度，就會被視為風俗營業的一種。留學生不可在未取得風俗營業許可卻燈光過暗的酒吧打工。 設有小隔間包廂的飲食店：若店內設置面積5平方公尺以下的密閉包廂供客人使用（例如小型KTV包廂等），法律稱為「区画席飲食店」，這屬於風俗営業第3號許可範疇。一般的餐飲許可店不可隨意設置完全封閉且狹小的包廂供客人娛樂，否則即落入風俗營業類別。留學生同樣不得在此類場所工作。根據規定，餐飲店的客席區域不得有遮蔽視線的高隔間（例如高度超過1公尺的隔板或圍屏），也不可設置可上鎖的私人包廂，以避免被認定為風俗營業。 其他風俗相關行業：包括賭博性娛樂場所和成人產業等也都屬於廣義的風俗営業。例如柏青哥店、麻將館、遊戲中心等遊技場，以及色情業（性風俗特殊営業，如風俗店、成人影片放送、情人旅館等）。 ","date":"2025-06-04T00:00:00Z","permalink":"http://localhost:1313/p/%E7%95%99%E5%AD%A6%E7%94%9F%E3%81%AE%E3%83%90%E3%82%A4%E3%83%88%E5%88%B6%E9%99%90/","title":"留学生のバイト制限"},{"content":"Embedding Code 1. 确认 VGG 特征输出接口 在 train_artistic.py 中，本地使用的是 scene.VGG.VGGEncoder，vgg_encoder(x) 会返回一个包含 .relu1_1、.relu2_1、.relu3_1、.relu4_1 四个属性的对象train_artistic。这些正好对应 CCPL 需要的多层特征。\n2. 在文件开头导入 CCPL 在 train_artistic.py 顶部（紧跟其他 import 之后）加入：\ndiff Copy Edit from utils.loss_utils import cal_adain_style_loss, cal_mse_content_loss +from ccpl.net import CCPL, mlp 这里假设你已将 CCPL-main/net.py 里的 net.py 拷贝到 StyleGaussian/ccpl/net.py，并在项目根 init.py 中配置好 ccpl 包的导入路径。\n3. 在训练函数开头实例化 CCPL 找到 training(\u0026hellip;) 函数开始部分，在创建 vgg_encoder 之后，加入：\n1 2 3 4 vgg_encoder = VGGEncoder().cuda() + # —— CCPL 初始化：mlp 是 net.py 中导出的 MLP 列表 + # num_s、num_l、tau 可从命令行参数传入 + ccpl_fn = CCPL(mlp=mlp).cuda() 4. 在训练主循环里计算 CCPL 找到如下位置：在渲染并计算完 content_loss 和 style_loss 之后train_artistic：\n1 2 3 4 5 6 7 8 9 10 11 # style loss 和 content loss rendered_rgb_features = vgg_encoder(normalize_vgg(rendered_rgb.unsqueeze(0))) content_loss = cal_mse_content_loss( gt_image_features.relu4_1, rendered_rgb_features.relu4_1 ) style_loss = 0. for style_feature, image_feature in zip( style_img_features, rendered_rgb_features): style_loss += cal_adain_style_loss(style_feature, image_feature) loss = content_loss + style_loss * style_weight 在这里插入 CCPL 计算：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # —— 在此处插入 CCPL + # 将四层特征整理为列表，注意 q 是 stylized，k 是 content + feats_q = [ + rendered_rgb_features.relu1_1, + rendered_rgb_features.relu2_1, + rendered_rgb_features.relu3_1, + rendered_rgb_features.relu4_1, + ] + feats_k = [ + gt_image_features.relu1_1, + gt_image_features.relu2_1, + gt_image_features.relu3_1, + gt_image_features.relu4_1, + ] + # start_layer/end_layer 控制 CCPL 作用的层数，比如只用 relu2~4 + end_layer = len(feats_q) # 4 + start_layer = end_layer - args.num_l # 如果 num_l=3，则 start_layer=1 (relu2) + ccp_loss = ccpl_fn( + feats_q = feats_q, + feats_k = feats_k, + num_s = args.num_s, + start_layer = start_layer, + end_layer = end_layer, + tau = args.tau + ) + # 将 CCPL 加权到总损失 + loss = loss + args.ccp_weight * ccp_loss 5. 更新命令行参数解析 在 if name == \u0026ldquo;main\u0026rdquo;: 中的 parser.add_argument(\u0026hellip;) 部分，添加：\n1 2 3 4 5 6 7 8 9 10 parser.add_argument(\u0026#34;--style_weight\u0026#34;, type=float, default=10.) parser.add_argument(\u0026#34;--content_preserve\u0026#34;, action=\u0026#39;store_true\u0026#39;, default=False) + parser.add_argument(\u0026#34;--ccp_weight\u0026#34;, type=float, default=5.0, + help=\u0026#34;weight for Contrastive Coherence Preserving Loss\u0026#34;) + parser.add_argument(\u0026#34;--num_s\u0026#34;, type=int, default=8, + help=\u0026#34;number of anchor samples per layer for CCPL\u0026#34;) + parser.add_argument(\u0026#34;--num_l\u0026#34;, type=int, default=3, + help=\u0026#34;number of layers to apply CCPL (e.g., 3 means relu2_1~relu4_1)\u0026#34;) + parser.add_argument(\u0026#34;--tau\u0026#34;, type=float, default=0.07, + help=\u0026#34;temperature for CCPL InfoNCE loss\u0026#34;) 6. 确认其他训练脚本无需修改 train_reconstruction.py 与 train_feature.py 仅负责重建和嵌入特征，不涉及风格迁移，不需要加 CCPL。\n高层 train.py 仅调度这三个阶段，也无需修改。\n总结 确认位置：只要在 train_artistic.py 的风格化训练循环里计算内容／风格损失后，立即调用 CCPL 并加权即可。\n检查对齐：所用 VGG 层 .relu1_1 ~ .relu4_1 与 CCPL 多层输入完全吻合。\n参数可控：通过新增的命令行参数可以方便地调节 CCPL 的强度、层数、采样数和温度。\n按照上面的步骤修改并运行，相信你就能在现有的 StyleGaussian 风格化训练流程里，正确地融入 CCPL，提升多视图和视频输出的一致性与稳定性。\nHyper-Parameter Code in terminal: 1 2 3 4 5 6 7 8 9 10 11 python train_artistic.py \\ --source_path datasets/Furiren \\ --wikiartdir datasets/wikiart \\ --ckpt_path output/Furiren/feature/default/chkpnt/feature.pth \\ --style_weight 10 \\ --ccp_weight 5.0 \\ --num_s 8 \\ --num_l 3 \\ --tau 0.07 \\ --exp_name default And here is the original terminal parameters: 1 2 3 4 5 python train_artistic.py \\ -s datasets/train \\ --wikiartdir datasets/wikiart \\ --ckpt_path output/train/feature/default/chkpnt/feature.pth \\ --style_weight 10 ","date":"2025-05-15T00:00:00Z","permalink":"http://localhost:1313/p/ccpl-code-embedding/","title":"CCPL Code Embedding"},{"content":"Neovim is a terminal editor, but thanks to many amazing plugins andin github, it can be configed into a very useful IDE.\nPersonal Github Config Line\nFile Tree 1 2 3 tt # open \u0026amp; close the file tree. # Other operation is just vim-like. Window Management 1 2 3 4 Split to Right (cursor also moved to the Window): sl Split to Left (cursor also moved to the Window): sj Split to Up (cursor also moved to the Window): si Split to Down (cursor also moved to the Window): sk Window Switch 1 move to somewindow: \u0026lt;leader\u0026gt;i/j/k/l ","date":"2025-05-15T00:00:00Z","permalink":"http://localhost:1313/p/from-0-to-ide-neovim-config-by-lua/","title":"From 0 to IDE - Neovim (Config by Lua)"},{"content":"How to train Your Own Models 1 2 3 Step 1️⃣ train_reconstruction.py --\u0026gt; 生成 point_cloud.ply Step 2️⃣ train_feature.py --\u0026gt; 提取特征 Step 3️⃣ train_artistic.py --\u0026gt; 风格迁移训练 1.Get point-cloud Data This step can be finished in Orininal Gaussian Train\nReference the Catalog of Datasets/ dir\n2.Reconstruct the Point Cloud 1 python train_reconstruction.py -s datasets/train Output Model saved in: output/train/reconstruction/\n3.Feature Embedding 1 2 python train_feature.py -s datasets/train \\ --ply_path output/train/reconstruction/default/point_cloud/iteration_30000/point_cloud.ply Output Model saved in: output/train/feature\n4.Style Transfer Training Before this step, modify the train_artistic.py\nand add the following code to the import part of the code:\n1 2 from PIL import ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True or the broken image will stop the training.\nthen run the following command in terminal:\n1 2 3 python train_artistic.py -s datasets/train \\ --wikiartdir datasets/wikiart \\ --ckpt_path output/train/feature/default/chkpnt/feature.pth --style_weight 10 5.Start Viewer 1 2 python viewer.py -m output/Furiren/artistic/default \\ --style_folder images --viewer_port 8080 view it in localhost:8080\n","date":"2025-05-15T00:00:00Z","permalink":"http://localhost:1313/p/the-steps-of-stylegaussian/","title":"The Steps of StyleGaussian"},{"content":"Basic Conception Neual Networks CNN, namely Convolutional(畳み込み) Neural Networks\nfor example, if you want to recognize an image \u0026ldquo;X\u0026rdquo;, you can change the image into matrix, then you can make three matrices $$\\begin{bmatrix}-1 \u0026amp; -1 \u0026amp; 1\\\\ -1 \u0026amp; 1 \u0026amp; -1\\\\ 1 \u0026amp; -1 \u0026amp; -1 \\end{bmatrix}$$ $$\\begin{bmatrix}1 \u0026amp; -1 \u0026amp; 1\\\\ -1 \u0026amp; 1 \u0026amp; -1\\\\ 1 \u0026amp; -1 \u0026amp; -1 \\end{bmatrix}$$ $$\\begin{bmatrix}1 \u0026amp; -1 \u0026amp; -1\\\\ -1 \u0026amp; 1 \u0026amp; -1\\\\ -1 \u0026amp; -1 \u0026amp; 1 \\end{bmatrix}$$\nwhich have the specific feature of \u0026ldquo;X\u0026rdquo;, left-above, center, and right above.\nSperical harmonics It is a type of function expansion in 3D space. It is a basis fuction on a spherical surface, similar to how Fourier series perform an orthogonal expansion on a 1D interval.\nspherical harmonics can indeed be seen as a 3D basis function expansion:\nPolynomial expansion: Uses $x^3, x^2, x^1, x^0$ to construct polynomial basis functions. Fourier expansion: Uses sine and cosine functions as basis functions. Spherical harmonic expansion: Uses $Y_l^m(θ,ϕ)$ as basis functions for the surface of a sphere. Hierarchical Sampling Coarse(粗い) Network and Fine(細い) Net. Coarse sample is uniform(一様) sampling, which cannot sapling points of edge very clearly and will lead to issues of wasted sampling points in empty spaces ineffectively. So after coarse sampling, there is a fine samling, which sample more points in rapidly changed place, like edge.\nRepresenting a 3D space with a continuous field Continuous Field: This is a mathematical concept representing a mapping function where every point $(x,y,z)$ is associated with a property or value.\nCamera The position and orientation of the camera are determined by its extrinsic matrix, while the projection properties are determined by its intrinsic matrix.\nextrinsic matrix is also called w2c(world-to-camera) matrix.\nthe inverse matrix(逆行列) of w2c is c2w matrix, which is widely used in Nerf.\nthe function of c2w is transform points from camera axis to world axis.\n$$\\begin{bmatrix} R \u0026amp; T\\\\ 0 \u0026amp; 1\\end{bmatrix} = \\begin{bmatrix} r11 \u0026amp; r12 \u0026amp; r13 \u0026amp; t1 \\\\ r21 \u0026amp; r22 \u0026amp; r23 \u0026amp; t2 \\\\ r31 \u0026amp; r32 \u0026amp; r33 \u0026amp; t3 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}$$\nthe intrinsic matrix of camera K is below:\n$$\\begin{bmatrix}f_x \u0026amp; 0 \u0026amp; c_x\\\\ 0 \u0026amp; f_y \u0026amp; c_y\\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}$$\n$f_x$ and $f_y$ represent the vertical focal length and horizontal focal length\nHow to Get Camera parameters In Nerf, Intrinsic and Extrinsic parameters should be given before you start, but how can we get these parameters?\nWell, there are two ways, the first way is using data from rendering software like blender.\nThe second way is using real data from our own real camera.\nthere are some tech help us, such as COLMAP: ColMap Link, which is a sfm algorithm.\n{{ }}\n3DGS use colmap to initialize a point cloud\n{{ }}\n","date":"2024-11-27T00:00:00Z","permalink":"http://localhost:1313/p/nerf-source-code-explain/","title":"Nerf Source Code Explain"},{"content":"記号学はさまざまな学問と関係があります。特にゲシュタルト心理学において、この学問は一つの図形のように個々の要素の総和以上のまとまりのある形態をゲシュタルトという。\n第一章(だいいっしょう) 記号学におけるゼロ記号とは、表面的には「何もない」ように見えても、文脈や他の記号との関係性において強い意味を持つことがあります。\n例えば、空白、暗闇、静かさ、無味など。\n記号は「物源」に基づいて３つに分けられることがわかります。\n１つ目は自然の事物、２つ目は人間が製造した器物、３つ目は人間が製造した「純粋な記号」であり、言語、芸術、表情、姿勢など。\n記号が表す意味は単なる「生成過程」(becoming)にすぎません。一旦意味が現れると、記号は終わり、さらにその意味も消失してしまいます。\n","date":"2024-11-25T00:00:00Z","permalink":"http://localhost:1313/p/%E3%83%96%E3%83%83%E3%82%AF%E3%81%AE%E6%84%9F%E6%83%B3%E3%83%BC%E8%A8%98%E5%8F%B7%E5%AD%A6%E5%8E%9F%E7%90%86/","title":"ブックの感想ー記号学原理"},{"content":"all of operations below are just tested in Ubuntu Env of my Personal Computer\n1. Install Nvidia Driver \u0026amp;\u0026amp; Anaconda 1 nvidia-smi # check GPU-Driver version check my Tips of Config Envs in Linux to config anaconda\n2. Check which version cuda your computer support \u0026amp;\u0026amp; Install Nvidia Official Document\nCUDA all history Version\nfinally add path to your bash file:\n1 export PATH=/usr/local/cuda-12.2/bin:$PATH 3. Install OpenGL 1 2 sudo apt install libgl-dev sudo apt install libglfw3-dev then use official github page way to install\n","date":"2024-11-20T00:00:00Z","permalink":"http://localhost:1313/p/how-to-config-instant-ngp/","title":"How To Config Instant-ngp"},{"content":"here is some basic operation of vim:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 # delete left 1 char d j # delete left 3 char d 3 j # delete right 1 char d l # delete right 3 char d 3 l # cut the whole line d d # copy the whole line y y # paste p # undo the last change u # go to the next word w # back to last word b # delete next word and into insert mode # (which means you can change the word directly) c w # change the content in \u0026#34;\u0026#34; or \u0026lt;\u0026gt; or whatever # h, which means in c h \u0026#34; c h \u0026lt;\u0026gt; # redo the undo change \u0026lt;ctrl\u0026gt; + r # find something f # find a letter f [letter you want to find] # delete until = d f = 0 # go to start of the line A # goto end and insert ","date":"2024-11-19T00:00:00Z","permalink":"http://localhost:1313/p/basic-operation-of-vim/","title":"Basic Operation of Vim"},{"content":"Install Part Install NeoVim first you need to try neovim, remember to install it’s newest version from github release (apt install is too old version)\nhttps://github.com/neovim/neovim\nThen you will need vim-plug to install plugins https://github.com/junegunn/vim-plug\nremember to reopen config file to finish your config\nuse the command line below to install what plugins you want:\n1 :PlugInstall [plugname] then add its’ github link to your config file, plz reference the github page of vim-plug above\nInstall coc.nvim to make your nvim like a real IDE make sure you have updated your neovim to the newest version\nhttps://github.com/neoclide/coc.nvim\nuse the command line below to install plugs of coc.nvim:\n1 :CocInstall coc-json You can install coc-marketplace first and use the command below to find plugs of coc.nvim:\n1 2 3 :CocInstall Coc-marketplace :CocList marketplace also use the command line below to check what you have installed:\n1 :CocList extensions then you can press to get further action\nwhat CocPlugs I’ve installed are above\nConfig Your Neovim enter ~/.config and make /nvim/init.vim\nhere is my config:\nhttps://github.com/ChouYuduki/NeovimSettings\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 set number set cursorline set showcmd \u0026#34; show what you did on the lower right corner set wildmenu set hlsearch set incsearch set ignorecase set smartcase set tabstop=4 set softtabstop=4 set shiftwidth=4 set noexpandtab set autoindent set cindent noremap h i noremap H I noremap i k noremap I 5k noremap K 5j noremap k j noremap j h \u0026#34; open file-tree explorer by typing tt noremap tt :CocCommand explorer\u0026lt;CR\u0026gt; map s \u0026lt;nop\u0026gt; map S :w\u0026lt;CR\u0026gt; map Q :q\u0026lt;CR\u0026gt; map R :source $MYVIMRC\u0026lt;CR\u0026gt; call plug#begin() Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;connorholyday/vim-snazzy\u0026#39; Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; call plug#end() let g:SnazzyTransparent = 1 color snazzy \u0026#34; initial coc.nvim plugins let g:coc_global_extensions = [ \u0026#39;coc-json\u0026#39;, \u0026#39;coc-vimlsp\u0026#39;, \u0026#39;coc-marketplace\u0026#39;, \u0026#39;coc-highlight\u0026#39; ] \u0026#34; Use tab for trigger completion with characters ahead and navigate \u0026#34; NOTE: There\u0026#39;s always complete item selected by default, you may want to enable \u0026#34; no select by `\u0026#34;suggest.noselect\u0026#34;: true` in your configuration file \u0026#34; NOTE: Use command \u0026#39;:verbose imap \u0026lt;tab\u0026gt;\u0026#39; to make sure tab is not mapped by \u0026#34; other plugin before putting this into your config inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; \\ coc#pum#visible() ? coc#pum#next(1) : \\ CheckBackspace() ? \u0026#34;\\\u0026lt;Tab\u0026gt;\u0026#34; : \\ coc#refresh() inoremap \u0026lt;expr\u0026gt;\u0026lt;S-TAB\u0026gt; coc#pum#visible() ? coc#pum#prev(1) : \u0026#34;\\\u0026lt;C-h\u0026gt;\u0026#34; \u0026#34; Make \u0026lt;CR\u0026gt; to accept selected completion item or notify coc.nvim to format \u0026#34; \u0026lt;C-g\u0026gt;u breaks current undo, please make your own choice inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;CR\u0026gt; coc#pum#visible() ? coc#pum#confirm() \\: \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;CR\u0026gt;\\\u0026lt;c-r\u0026gt;=coc#on_enter()\\\u0026lt;CR\u0026gt;\u0026#34; function! CheckBackspace() abort let col = col(\u0026#39;.\u0026#39;) - 1 return !col || getline(\u0026#39;.\u0026#39;)[col - 1] =~# \u0026#39;\\s\u0026#39; endfunction \u0026#34; Use \u0026lt;ctrl-space\u0026gt; to trigger completion inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;c-space\u0026gt; coc#refresh() \u0026#34; Highlight the same thing and its references when holding the cursor autocmd CursorHold * silent call CocActionAsync(\u0026#39;highlight\u0026#39;) ","date":"2024-11-19T00:00:00Z","permalink":"http://localhost:1313/p/how-to-config-vim/","title":"How To Config Vim"},{"content":"1. Initial your directory use this command to initial the current dir: git init\nthen you can use this command to check your dir’s status: git status\n2. submit your files add all of your modifying: git add .\nif you want to retract your add, use this: git reset\nthen your should tell git who you are: git config --global [user.name](http://user.name) \u0026quot;[your name]\u0026quot;\nfinally push your files: git commit -m \u0026quot;[what you modified]\u0026quot;\n3. ignore your files if these are some files you don’t want git to track, first create a file called .gitignore\nthen add files’ name into this file\n💡 if you let git start tracking some file, it will keep tracking it, even you try to ignore it after tracking, so you have to let git stop tracking the file:\ngit rm --cached [file name]\n4. add branch check now all of branches in this directory: git branch\nyou can use the command to create new branch: git branch [branch name]\nthen switch to the branch git checkout [branch name]\nif you want to switch back to the main branch: git checkout master\nif you want to merge the branch to your main branch: git merge [branch name]\nif you want to delete the branch: git branch -d [branch name]\n5. submit to github first create a new repository in github, and get it’s link:\nin terminal tell where is your repository:\ngit remote add origin [https://github.com/link/....git]\nthen push your directory:\ngit push --set-upstream origin master or git push -u origin master\nhere github may let you input your username and pwd,\nBut This Password is NOT your github login password!!!\ngo to github setting \u0026gt; Developer Settings \u0026gt; Personal access tokens\nand remember to tickle all of below\nthen copy your personal access tokens, it will be shown only once.\nfinally paste it on the password field of the terminal.\nif you want github remember your info here, run this command line before you push:\ngit config credential.helper store\nafter the above, every time you want to push your modification, just use git push without any additional parameters.\nget newest version of this repository use git pull in this directory to get newest modificaiton\nothers git clone --recursive clone main repository and all of submodules at the same time\n","date":"2024-11-19T00:00:00Z","permalink":"http://localhost:1313/p/how-to-use-git/","title":"How To Use Git"},{"content":"Install NodeJs via Binary Archive first download prebuilt binaries from NodeJs official website\nthen unzip it to any directory you wanna install, remember the path [node path]\nthen edit ~/.zshrc file, add below to the end\n1 2 3 # Nodejs export NODEJS_HOME=[node path]/bin export PATH=$NODEJS_HOME:$PATH then refresh config file\nsource ~/.zshrc\ninstall hexo npm install https://github.com/CodeFalling/hexo-asset-image \u0026ndash;save\nInstall Anaconda https://docs.anaconda.com/anaconda/install/linux/\nbash is necessary!!!\nInstall Code Env 1. g++/gcc 1 sudo apt install build-essential ","date":"2024-11-19T00:00:00Z","permalink":"http://localhost:1313/p/tips-of-config-envs-in-linux/","title":"Tips of Config Envs in Linux"}]